# ───────────────────────────────────────── Spring ────────────────────────────────────────
spring:

  # PostgreSQL / Timescale
  datasource:
    url:      ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 8
      connection-init-sql: "SET search_path TO ingest, public"  # Set the schema for the connection

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
      hibernate.default_schema: ingest
    open-in-view: false

  # Kafka
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer:   org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  # GraphQL endpoint
  graphql:
    path: /graphql
    cors:
      allowed-origins: "*"
    websocket:
      path: /graphql

  # Flyway
  flyway:
    schemas: ingest
    locations: classpath:db/migration
    baseline-on-migrate: true

# ────────────────────────────────────── Actuator / Prometheus ───────────────────────────
management:
  endpoints:
    web:
      exposure:
        include: health, prometheus        # /actuator/health, /actuator/prometheus
  endpoint:
    prometheus.enabled: true
  # if you want a separate port for Prometheus:
  # server.port: 9090
  prometheus:
    metrics:
      export:
        enabled: true

# ───────────────────────────────────────── Logging ───────────────────────────────────────
logging:
  level:
    root: INFO
    com.example.iot.ingest: INFO
    org.eclipse.paho: WARN

# ───────────────────────────────────────── MQTT ─────────────────────────────────────────
mqtt:
  broker:   ${MQTT_BROKER}
  clientId: ingest-service
  topic:    sensors/#
  username: ${MQTT_USER}
  password: ${MQTT_PASS}



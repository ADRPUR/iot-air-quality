scalar Timestamp

# ──── Types ─────────────────────────────────────────────────────────────
type Metric  {
    time:     String
    sensorId: String
    field:    String
    value:    Float
}

type Sensor  {
    sensorId: String!
    name:     String
    visible:  Boolean!
}

type MetricAvg {
    bucket:   Timestamp!
    sensorId: String!
    field:    String!
    avgVal:   Float
    sensor:   Sensor!
}

type MetricAvgUpdate {
    sensorId: String!
    field:    String!
    sensor:   Sensor!
}

type SensorValue {
    sensorId: String!
    field:    String!
    value:    Float!
    ts:       Timestamp!
    sensor:   Sensor!
}

# ──── Root QUERY ────────────────────────────────────────────────────────
type Query {
    # metric queries
    latestMetrics(limit: Int = 20): [Metric]
    latestMetricsBySensor(
        sensorId: String!, field: String!, limit: Int = 20
    ): [Metric]
    metricsInRange(
        sensorId: String!
        field:    String!
        from:     String!
        to:       String
        limit:    Int
    ): [Metric!]!

    metricsAvg5m(
        sensorId: String!
        field:    String!
        from:     String!
        to:       String
        limit:    Int = 500
    ): [MetricAvg!]!

    currentValues: [SensorValue!]!
    sensors:       [Sensor!]!
}

# ──── Root MUTATION ─────────────────────────────────────────────────────
type Mutation {
    setSensorVisibility(sensorId: String!, visible: Boolean!): Sensor!
    renameSensor       (sensorId: String!, name: String!):   Sensor!
}

# ──── Root SUBSCRIPTION ──────────────────────────────────────────────────
type Subscription {
    avg5mUpdated(sensorId: String!, field: String!): MetricAvgUpdate!
    sensorValueUpdated(
        sensorId: String, field: String
    ): SensorValue!
}

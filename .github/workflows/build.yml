name: build-and-push

on: [push]

env:
  REGISTRY: ghcr.io                 # target registry

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write               # push to GHCR
    steps:
      # ─── 1. checkout source ───────────────────────────────────────────
      - uses: actions/checkout@v4

      # ─── 2. JDK 21 + Maven cache ──────────────────────────────────────
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # ─── 3. build ingest-service jar ──────────────────────────────────
      - name: Maven package
        run: |
          cd ingest-service
          ./mvnw -B verify spring-boot:repackage

      # ─── 4. prepare Mosquitto auth files (passwd + acl) ───────────────
      - name: Generate Mosquitto passwd/acl
        run: |
          mkdir -p infra/mosquitto/generated

          docker run --rm \
            -v "$PWD/infra/mosquitto/generated:/mosquitto/config" \
            eclipse-mosquitto \
            /bin/sh -c "\
              mosquitto_passwd -c -b /mosquitto/config/passwd \
                '${{ secrets.MQTT_USER }}' '${{ secrets.MQTT_PASS }}' && \
              printf 'user %s\ntopic sensors/#\n' '${{ secrets.MQTT_USER }}' \
                > /mosquitto/config/acl && \
              chmod 600 /mosquitto/config/*"

      # ─── 5. compute lower-case image name ─────────────────────────────
      - id: vars
        run: |
          IMAGE=$(echo "${{ github.repository }}-ingest" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE" >> $GITHUB_ENV

      # ─── 6. build & tag Docker image ──────────────────────────────────
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:sha-${GITHUB_SHA::8} ingest-service
          docker tag  $REGISTRY/$IMAGE_NAME:sha-${GITHUB_SHA::8} \
                      $REGISTRY/$IMAGE_NAME:latest

      # ─── Start TimescaleDB for CI ────────────────────────────────────────
      - name: Start TimescaleDB for CI
        run: |
          docker run -d --name ci-postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=smarthome \
            -p 5432:5432 \
            timescale/timescaledb:latest-pg16

          # wait until Postgres is accepting connections
          for i in {1..30}; do
            docker exec ci-postgres pg_isready -U postgres && break
            sleep 1
          done

      - name: Flyway migrate (alert)
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}/alert-service/src/main/resources/db/migration:/flyway/sql" \
            flyway/flyway:10 \
            -url=jdbc:postgresql://localhost:5432/smarthome \
            -user=postgres -password=postgres \
            -schemas=alert \
            -locations=filesystem:/flyway/sql \
            migrate

      - name: Flyway migrate (ingest)
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}/ingest-service/src/main/resources/db/migration:/flyway/sql" \
            flyway/flyway:10 \
            -url=jdbc:postgresql://localhost:5432/smarthome \
            -user=postgres -password=postgres \
            -schemas=ingest \
            -locations=filesystem:/flyway/sql \
            migrate

      # ─── 7. login & push to GHCR ──────────────────────────────────────
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:sha-${GITHUB_SHA::8}
          docker push $REGISTRY/$IMAGE_NAME:latest
